{"version":3,"sources":["components/pixel-canvas/canvas-fns.ts","components/pixel-canvas/PureCanvas.tsx","components/pixel-canvas/PixelCanvas.tsx","components/color-palette/ColorPalette.tsx","components/tool/PencilTool.tsx","components/app/App.tsx","serviceWorker.ts","store/index.ts","index.tsx"],"names":["withinBound","_ref2","_ref3","width","height","x","y","clamp","_ref6","min","max","value","Math","PureCanvas","React","memo","_ref","animatedProps","canvasRefCallback","bindGesture","react_default","a","createElement","web","canvas","Object","assign","ref","className","style","PixelCanvas","selectedColor","useStoreState","state","palette","brushSize","tool","zoom","getCanvasContext","freeze","ctx","canvasRef","current","getContext","useEffect","canvasContext","imageSmoothingEnabled","fillStyle","fillRect","clear","useRef","useCallback","node","useGesture","onDrag","_state$previous","slicedToArray","previous","x0","y0","_state$xy","xy","x1","y1","rectX0","floor","offsetLeft","scrollLeft","rectY0","offsetTop","scrollTop","rectX1","rectY1","_ref5","color","xClamp","yClamp","dx","abs","dy","sx","sy","err","e2","line","_useSpring","useSpring","_useSpring2","setAnimatedProps","ColorPalette","colors","selectColor","useStoreActions","actions","display","gridTemplateColumns","map","i","key","onClick","index","backgroundColor","padding","PencilTool","increaseBrushSize","decreaseBrushSize","increaseZoom","decreaseZoom","Fragment","App","ColorPalette_ColorPalette","PencilTool_PencilTool","PixelCanvas_PixelCanvas","Boolean","window","location","hostname","match","storeModel","selectedIndex","action","computed","selected","payload","store","createStore","ReactDOM","render","easy_peasy_esm","components_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ddd3ce6.chunk.js","sourcesContent":["import { Color } from \"csstype\";\n\nexport interface CanvasContext {\n  ctx: CanvasRenderingContext2D;\n  width: number;\n  height: number;\n  brushSize: number;\n}\n\nexport const clear = ({ ctx, width, height }: CanvasContext) => {\n  // ctx.clearRect(0, 0, width, height);\n  ctx.fillStyle = \"white\"; // TODO use clearRect\n  ctx.fillRect(0, 0, width, height);\n};\n\nexport const withinBound = (\n  { width, height }: CanvasContext,\n  { x, y }: { x: number; y: number }\n) => {\n  if (x < 0 || x >= width || y < 0 || y >= height) {\n    return false;\n  }\n  return true;\n};\n\nexport const setColor = (\n  canvasContext: CanvasContext,\n  { x, y, color }: { x: number; y: number; color: Color }\n) => {\n  const { ctx, brushSize } = canvasContext;\n  if (!withinBound(canvasContext, { x, y })) {\n    return;\n  }\n\n  // canvas logic to fill that rect\n  ctx.fillStyle = color;\n  ctx.fillRect(\n    x - Math.floor(brushSize / 2),\n    y - Math.floor(brushSize / 2),\n    brushSize,\n    brushSize\n  );\n};\n\nexport const line = (\n  canvasContext: CanvasContext,\n  {\n    x0,\n    y0,\n    x1,\n    y1,\n    color\n  }: {\n    x0: number;\n    y0: number;\n    x1: number;\n    y1: number;\n    color: string;\n  }\n) => {\n  const { ctx, width, height, brushSize } = canvasContext;\n  const xClamp = clamp({\n    min: 0,\n    max: width - 1\n  });\n  const yClamp = clamp({\n    min: 0,\n    max: height - 1\n  });\n\n  x0 = xClamp(x0);\n  y0 = yClamp(y0);\n  x1 = xClamp(x1);\n  y1 = yClamp(y1);\n\n  const dx = Math.abs(x1 - x0);\n  const dy = Math.abs(y1 - y0);\n  const sx = x0 < x1 ? 1 : -1;\n  const sy = y0 < y1 ? 1 : -1;\n  let err = dx - dy;\n\n  while (true) {\n    //set pixel\n    ctx.fillStyle = color;\n    ctx.fillRect(\n      x0 - Math.floor(brushSize / 2),\n      y0 - Math.floor(brushSize / 2),\n      brushSize,\n      brushSize\n    );\n\n    //if we've reached the end goal, exit the loop\n    if (x0 === x1 && y0 === y1) {\n      break;\n    }\n    const e2 = 2 * err;\n    if (e2 > -dy) {\n      err -= dy;\n      x0 += sx;\n    }\n    if (e2 < dx) {\n      err += dx;\n      y0 += sy;\n    }\n  }\n};\n\nconst clamp = ({ min, max }: { min: number; max: number }) => (\n  value: number\n) => {\n  return Math.min(Math.max(value, min), max);\n};\n","import React from \"react\";\nimport { ReactEventHandlers } from \"react-use-gesture/events\";\nimport \"./Canvas.css\";\nimport {animated} from 'react-spring'\n\ninterface Props {\n  width: number;\n  height: number;\n  animatedProps: React.CSSProperties;\n  canvasRefCallback: (instance: HTMLCanvasElement) => void; // TODO nullable\n  bindGesture: (...args: any[]) => ReactEventHandlers; // TODO nullable\n}\n\nconst _PureCanvas: React.FC<Props> = ({\n  width,\n  height,\n  animatedProps,\n  canvasRefCallback,\n  bindGesture\n}) => {\n  return (\n    <animated.canvas\n      {...bindGesture()}\n      ref={canvasRefCallback}\n      width={width}\n      height={height}\n      className={\"Canvas-pixelated\"}\n      style={animatedProps}\n    />\n  );\n};\n\nexport const PureCanvas = React.memo(_PureCanvas);\n","import React, { useRef, useEffect, useCallback } from \"react\";\nimport { CanvasContext, clear, line, withinBound } from \"./canvas-fns\";\nimport { useStoreState } from \"easy-peasy\";\nimport { StoreModel } from \"../../store\";\nimport { PureCanvas } from \"./PureCanvas\";\nimport { useGesture } from \"react-use-gesture\";\nimport { useSpring } from \"react-spring\";\n\ntype Props = {};\n\nexport const PixelCanvas: React.FC<Props> = () => {\n  const selectedColor = useStoreState<StoreModel>(\n    state => state.palette.selectedColor\n  );\n  const brushSize = useStoreState<StoreModel>(state => state.tool.brushSize);\n  const zoom = useStoreState<StoreModel>(state => state.canvas.zoom);\n  const width = useStoreState<StoreModel>(state => state.canvas.width);\n  const height = useStoreState<StoreModel>(state => state.canvas.height);\n\n  const getCanvasContext = (): CanvasContext => {\n    return Object.freeze({\n      ctx: canvasRef.current!.getContext(\"2d\")!,\n      width,\n      height,\n      brushSize\n    } as CanvasContext);\n  };\n\n  // canvas setup\n  useEffect(() => {\n    const canvasContext = getCanvasContext();\n    canvasContext.ctx.imageSmoothingEnabled = true;\n\n    clear(canvasContext);\n\n    // eslint-disable-next-line\n  }, []);\n\n  // canvas ref callback\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const canvasRefCallback = useCallback(node => {\n    if (node !== null) {\n      canvasRef.current = node;\n    }\n  }, []);\n\n  // gesture for canvas\n  const bindGesture = useGesture({\n    onDrag: state => {\n      const [x0, y0] = state.previous;\n      const [x1, y1] = state.xy;\n      const canvas = canvasRef.current!;\n\n      const rectX0 = Math.floor(\n        (x0 - canvas.offsetLeft - canvas.scrollLeft) / zoom\n      );\n      const rectY0 = Math.floor(\n        (y0 - canvas.offsetTop - canvas.scrollTop) / zoom\n      );\n      const rectX1 = Math.floor(\n        (x1 - canvas.offsetLeft - canvas.scrollLeft) / zoom\n      );\n      const rectY1 = Math.floor(\n        (y1 - canvas.offsetTop - canvas.scrollTop) / zoom\n      );\n\n      // ignore if previous pos out of bound\n      if (!withinBound(getCanvasContext(), { x: rectX0, y: rectY0 })) {\n        return;\n      }\n\n      line(getCanvasContext(), {\n        x0: rectX0,\n        y0: rectY0,\n        x1: rectX1,\n        y1: rectY1,\n        color: selectedColor\n      });\n    }\n  });\n\n  // animation\n  const [animatedProps, setAnimatedProps] = useSpring(() => {\n    return {\n      width: zoom * width,\n      height: zoom * height\n    };\n  });\n  useEffect(() => {\n    setAnimatedProps({\n      width: zoom * width,\n      height: zoom * height\n    });\n  }, [width, height, zoom, setAnimatedProps]);\n\n  return (\n    <PureCanvas\n      canvasRefCallback={canvasRefCallback}\n      width={width}\n      height={height}\n      bindGesture={bindGesture}\n      animatedProps={animatedProps}\n    />\n    // Background Canvas\n  );\n};\n","import React from \"react\";\nimport { useStoreState, useStoreActions } from \"easy-peasy\";\nimport { StoreModel } from \"../../store\";\n\nexport const ColorPalette: React.FC = () => {\n  const colors = useStoreState<StoreModel, string[]>(\n    state => state.palette.colors\n  );\n\n  const selectColor = useStoreActions<StoreModel>(\n    actions => actions.palette.selectColor\n  );\n\n  const handleClick = (index: number) => () => {\n    selectColor(index)\n  };\n\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(auto-fit, minmax(100px, 1fr))\"\n      }}\n    >\n      {colors.map((color, i) => (\n        <button key={i} onClick={handleClick(i)}>\n          <div\n            style={{\n              backgroundColor: color,\n              padding: \"1em\"\n            }}\n          >\n            {color}\n          </div>\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport { StoreModel } from \"../../store\";\n\nexport const PencilTool: React.FC = () => {\n  const brushSize = useStoreState<StoreModel>(state => state.tool.brushSize);\n  const increaseBrushSize = useStoreActions<StoreModel>(\n    actions => actions.tool.increaseBrushSize\n  );\n  const decreaseBrushSize = useStoreActions<StoreModel>(\n    actions => actions.tool.decreaseBrushSize\n  );\n\n  const handleIncreaseClick =() => {\n    increaseBrushSize(1);\n  };\n  const handleDecreaseClick = () => () => {\n    decreaseBrushSize(1);\n  };\n\n  // zoom\n  const zoom = useStoreState<StoreModel>(state => state.canvas.zoom);\n  const increaseZoom = useStoreActions<StoreModel>(\n    actions => actions.canvas.increaseZoom\n  );\n  const decreaseZoom = useStoreActions<StoreModel>(\n    actions => actions.canvas.decreaseZoom\n  );\n\n  const handleIncreaseZoomClick =() => {\n    increaseZoom(2);\n  };\n  const handleDecreaseZoomClick = () => {\n    decreaseZoom(2);\n  };\n\n  return (\n    <>\n    <div>\n      <span>Pencil Tool:&nbsp;</span>\n      <button onClick={handleIncreaseClick}>+</button>\n      <span>{brushSize}</span>\n      <button onClick={handleDecreaseClick}>-</button>\n    </div>\n\n    <div>\n      <span>Zoom Tool:&nbsp;</span>\n      <button onClick={handleIncreaseZoomClick}>+</button>\n      <span>{zoom}</span>\n      <button onClick={handleDecreaseZoomClick}>-</button>\n    </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { PixelCanvas } from \"../pixel-canvas\";\nimport { ColorPalette } from \"../color-palette/ColorPalette\";\nimport { PencilTool } from \"../tool\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ColorPalette />\n        <PencilTool/>\n        <PixelCanvas />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, Action, action, Computed, computed } from \"easy-peasy\";\n\ninterface PaletteModel {\n  selectedIndex: number;\n  colors: string[];\n\n  selectedColor: Computed<PaletteModel, string>;\n  selectColor: Action<PaletteModel, number>;\n}\nconst defaultPaletteModel: PaletteModel = {\n  selectedIndex: 0,\n  colors: [\n    \"#1a1c2c\",\n    \"#5d275d\",\n    \"#b13e53\",\n    \"#ef7d57\",\n    \"#ffcd75\",\n    \"#a7f070\",\n    \"#38b764\",\n    \"#257179\",\n    \"#29366f\",\n    \"#3b5dc9\",\n    \"#41a6f6\",\n    \"#73eff7\",\n    \"#f4f4f4\",\n    \"#94b0c2\",\n    \"#566c86\",\n    \"#333c57\"\n  ],\n  selectColor: action((state, index) => {\n    state.selectedIndex = index;\n  }),\n  selectedColor: computed(state => state.colors[state.selectedIndex])\n};\n\ntype ToolType = \"pencil\" | \"eraser\" | \"fill\" | \"pan\" | \"eyedropper\";\ninterface ToolModel {\n  selected: ToolType;\n  brushSize: number;\n\n  increaseBrushSize: Action<ToolModel, number>;\n  decreaseBrushSize: Action<ToolModel, number>;\n}\nconst defaultToolModel: ToolModel = {\n  selected: \"pencil\",\n  brushSize: 1,\n  increaseBrushSize: action((state, payload) => {\n    state.brushSize = Math.max(1, state.brushSize + payload);\n  }),\n  decreaseBrushSize: action((state, payload) => {\n    state.brushSize = Math.max(1, state.brushSize - payload);\n  })\n};\n\ninterface CanvasModel {\n  width: number;\n  height: number;\n  zoom: number;\n\n  increaseZoom: Action<CanvasModel, number>;\n  decreaseZoom: Action<CanvasModel, number>;\n}\nconst defaultCanvasModel: CanvasModel = {\n  width: 20,\n  height: 20,\n  zoom: 30,\n  increaseZoom: action((state, payload) => {\n    state.zoom = Math.min(100, state.zoom + payload);\n  }),\n  decreaseZoom: action((state, payload) => {\n    if (state.zoom - payload <= 0) {\n      return state;\n    }\n    state.zoom -= payload;\n  })\n};\n\nexport type StoreModel = {\n  palette: PaletteModel;\n  tool: ToolModel;\n  canvas: CanvasModel;\n};\n\nexport const storeModel: StoreModel = {\n  palette: defaultPaletteModel,\n  tool: defaultToolModel,\n  canvas: defaultCanvasModel\n};\n\nexport const store = createStore(storeModel);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { StoreProvider } from \"easy-peasy\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}